"""
食物热量数据库模块

提供常见食物的热量信息、营养素分析和查询功能
"""

import difflib
import re

# 热量信息以每100克食物的千卡为单位
FOOD_CALORIES = {
    # 主食类
    "米饭": 116,
    "糙米饭": 111,
    "面条": 107,
    "全麦面条": 124,
    "馒头": 223,
    "全麦馒头": 205,
    "面包": 265,
    "全麦面包": 247,
    "燕麦": 389,
    "玉米": 112,
    "小米": 359,
    "紫米": 340,
    "藜麦": 368,
    "土豆泥": 83,
    "粥": 50,
    
    # 肉类
    "猪肉": 395,
    "猪瘦肉": 143,
    "猪五花肉": 522,
    "牛肉": 106,
    "牛排": 269,
    "牛肉馅": 332,
    "羊肉": 203,
    "鸡肉": 167,
    "鸡胸肉": 113,
    "鸡腿肉": 186,
    "鸭肉": 240,
    "鹅肉": 321,
    "鱼肉": 100,
    "三文鱼": 208,
    "金枪鱼": 184,
    "虾": 99,
    "蟹": 103,
    "贝类": 130,
    
    # 蔬菜类
    "西红柿": 15,
    "黄瓜": 16,
    "白菜": 12,
    "菠菜": 23,
    "生菜": 14,
    "芹菜": 16,
    "白萝卜": 21,
    "胡萝卜": 36,
    "土豆": 81,
    "红薯": 86,
    "茄子": 24,
    "青椒": 21,
    "洋葱": 40,
    "大蒜": 149,
    "生姜": 79,
    "豆芽": 28,
    "青菜": 17,
    "韭菜": 27,
    "莴苣": 15,
    "南瓜": 26,
    "冬瓜": 14,
    "丝瓜": 18,
    "苦瓜": 17,
    "西葫芦": 19,
    "蘑菇": 29,
    "木耳": 35,
    
    # 水果类
    "苹果": 52,
    "梨": 51,
    "香蕉": 93,
    "橙子": 47,
    "柚子": 42,
    "葡萄": 43,
    "西瓜": 32,
    "哈密瓜": 33,
    "草莓": 32,
    "蓝莓": 57,
    "樱桃": 63,
    "桃子": 39,
    "杏": 48,
    "李子": 47,
    "芒果": 60,
    "菠萝": 49,
    "猕猴桃": 61,
    "石榴": 83,
    "榴莲": 147,
    "椰子": 354,
    "无花果": 74,
    "柿子": 71,
    "山竹": 73,
    "荔枝": 66,
    "龙眼": 60,
    
    # 干果坚果类
    "花生": 567,
    "杏仁": 607,
    "核桃": 654,
    "腰果": 553,
    "开心果": 594,
    "瓜子": 573,
    "葵花籽": 581,
    "松子": 673,
    "榛子": 628,
    "枣干": 287,
    "葡萄干": 290,
    "蔓越莓干": 308,
    
    # 豆制品类
    "豆腐": 83,
    "豆腐干": 138,
    "豆浆": 33,
    "豆腐皮": 368,
    "腐竹": 480,
    "豆干": 218,
    "千张": 157,
    "豆芽": 28,
    "豆沙": 337,
    
    # 蛋奶类
    "鸡蛋": 144,
    "鸭蛋": 184,
    "鹌鹑蛋": 158,
    "牛奶": 66,
    "酸奶": 72,
    "奶酪": 350,
    "黄油": 717,
    "奶油": 340,
    
    # 零食类
    "薯片": 536,
    "爆米花": 387,
    "巧克力": 546,
    "黑巧克力": 598,
    "冰淇淋": 207,
    "蛋糕": 349,
    "曲奇": 480,
    "饼干": 435,
    "糖果": 390,
    "果冻": 62,
    "巧克力酱": 535,
    "花生酱": 589,
    
    # 饮料类
    "可乐": 42,
    "雪碧": 40,
    "果汁": 45,
    "牛奶": 66,
    "豆浆": 33,
    "橙汁": 47,
    "苹果汁": 46,
    "咖啡": 2,
    "拿铁": 40,
    "奶茶": 87,
    "啤酒": 43,
    "红酒": 83,
    "白酒": 236,
    "茶": 0,
    
    # 快餐类
    "汉堡": 295,
    "奶酪汉堡": 330,
    "巨无霸": 503,
    "披萨": 267,
    "炸鸡": 337,
    "炸鸡腿": 290,
    "炸鸡翅": 324,
    "薯条": 312,
    "鸡块": 297,
    "热狗": 290,
    "三明治": 258,
    
    # 中餐常见菜
    "宫保鸡丁": 151,
    "鱼香肉丝": 135,
    "麻婆豆腐": 107,
    "回锅肉": 231,
    "糖醋里脊": 187,
    "红烧肉": 325,
    "东坡肉": 379,
    "红烧鱼": 140,
    "清蒸鱼": 113,
    "水煮肉片": 174,
    "水煮鱼": 132,
    "辣子鸡": 220,
    "蚂蚁上树": 165,
    "青椒肉丝": 130,
    "鱼香茄子": 94,
    "地三鲜": 88,
    "西红柿炒鸡蛋": 112,
    "木须肉": 145,
    "梅菜扣肉": 287,
    "锅包肉": 247,
    "酸菜鱼": 128,
    "干煸四季豆": 145,
    "蒜蓉西兰花": 65,
    "醋溜白菜": 46,
    "虎皮青椒": 57,
    "韭菜炒鸡蛋": 144,
    "豆角烧茄子": 79,
    "蒜蓉粉丝娃娃菜": 94,
    
    # 特色小吃
    "煎饼果子": 248,
    "烤冷面": 233,
    "炒年糕": 215,
    "粽子": 196,
    "肉夹馍": 226,
    "凉皮": 143,
    "烧饼": 358,
    "油条": 389,
    "锅贴": 220,
    "蛋挞": 278,
    "烧卖": 154,
    "饺子": 175,
    "小笼包": 182,
    "春卷": 252,
    "煎堆": 379,
    "粢饭糕": 220,
    "麻球": 346,
    "桂花糕": 282,
    "豆沙馅饼": 297,
    "马蹄糕": 174,
}

# 更复杂的菜品和组合食物
COMPLEX_FOODS = {
    "牛肉汉堡": {"热量": 354, "描述": "一份标准牛肉汉堡约150克，含有354千卡", "营养素": {"蛋白质": 15, "脂肪": 15, "碳水化合物": 35}},
    "意大利面": {"热量": 158, "描述": "一份意大利面约200克，含有158千卡/100克", "营养素": {"蛋白质": 5, "脂肪": 2, "碳水化合物": 30}},
    "披萨": {"热量": 267, "描述": "一片中号披萨约100克，含有267千卡", "营养素": {"蛋白质": 12, "脂肪": 10, "碳水化合物": 33}},
    "沙拉": {"热量": 152, "描述": "一份蔬菜沙拉配沙拉酱约200克，含有152千卡", "营养素": {"蛋白质": 3, "脂肪": 12, "碳水化合物": 8}},
    "炒饭": {"热量": 186, "描述": "一份炒饭约250克，含有186千卡/100克", "营养素": {"蛋白质": 5, "脂肪": 4, "碳水化合物": 32}},
    "煎饼果子": {"热量": 248, "描述": "一份约150克，含有248千卡/100克", "营养素": {"蛋白质": 7, "脂肪": 8, "碳水化合物": 38}},
    "火锅": {"热量": 230, "描述": "热量因具体食材而异，平均约230千卡/100克", "营养素": {"蛋白质": 16, "脂肪": 18, "碳水化合物": 5}},
    "麻辣烫": {"热量": 219, "描述": "一份约500克，热量因具体食材而异", "营养素": {"蛋白质": 15, "脂肪": 15, "碳水化合物": 12}},
    "烤肉": {"热量": 250, "描述": "一份烤肉约200克，含有250千卡/100克", "营养素": {"蛋白质": 20, "脂肪": 18, "碳水化合物": 2}},
    "寿司": {"热量": 145, "描述": "六片寿司约230克，含有145千卡/100克", "营养素": {"蛋白质": 6, "脂肪": 2, "碳水化合物": 28}},
    "盖浇饭": {"热量": 163, "描述": "一份约400克，含有163千卡/100克", "营养素": {"蛋白质": 8, "脂肪": 5, "碳水化合物": 25}},
    "拉面": {"热量": 112, "描述": "一碗拉面约500克，含有112千卡/100克", "营养素": {"蛋白质": 4, "脂肪": 2, "碳水化合物": 22}},
    "酸辣粉": {"热量": 153, "描述": "一碗约400克，含有153千卡/100克", "营养素": {"蛋白质": 5, "脂肪": 8, "碳水化合物": 18}},
    "米线": {"热量": 109, "描述": "一碗米线约400克，含有109千卡/100克", "营养素": {"蛋白质": 3, "脂肪": 1, "碳水化合物": 23}},
    "螺蛳粉": {"热量": 137, "描述": "一碗约400克，含有137千卡/100克", "营养素": {"蛋白质": 6, "脂肪": 5, "碳水化合物": 20}},
    "重庆小面": {"热量": 125, "描述": "一碗约350克，含有125千卡/100克", "营养素": {"蛋白质": 5, "脂肪": 4, "碳水化合物": 21}},
    "担担面": {"热量": 130, "描述": "一碗约350克，含有130千卡/100克", "营养素": {"蛋白质": 6, "脂肪": 5, "碳水化合物": 19}},
    "麻辣香锅": {"热量": 285, "描述": "一份约400克，含有285千卡/100克", "营养素": {"蛋白质": 14, "脂肪": 22, "碳水化合物": 12}},
    "烤鸭": {"热量": 281, "描述": "一只烤鸭约240克，含有281千卡/100克", "营养素": {"蛋白质": 24, "脂肪": 20, "碳水化合物": 1}},
    "叉烧饭": {"热量": 204, "描述": "一份约350克，含有204千卡/100克", "营养素": {"蛋白质": 15, "脂肪": 7, "碳水化合物": 25}},
}

# 营养素数据库 - 每100克食物的营养素含量（克）
NUTRIENTS = {
    # 主食类
    "米饭": {"蛋白质": 2.6, "脂肪": 0.3, "碳水化合物": 25.5, "膳食纤维": 0.4, "维生素C": 0, "钙": 5, "铁": 0.2},
    "面条": {"蛋白质": 3.4, "脂肪": 0.5, "碳水化合物": 23.1, "膳食纤维": 1.2, "维生素C": 0, "钙": 15, "铁": 1.0},
    
    # 肉类
    "猪肉": {"蛋白质": 16.2, "脂肪": 32.1, "碳水化合物": 0, "胆固醇": 89, "钠": 62, "钾": 294},
    "牛肉": {"蛋白质": 20.3, "脂肪": 2.8, "碳水化合物": 0, "胆固醇": 70, "钠": 50, "钾": 320},
    "鸡肉": {"蛋白质": 18.4, "脂肪": 10.2, "碳水化合物": 0, "胆固醇": 80, "钠": 65, "钾": 230},
    
    # 蔬菜类
    "西红柿": {"蛋白质": 0.9, "脂肪": 0.2, "碳水化合物": 3.9, "膳食纤维": 1.1, "维生素C": 23, "钙": 10, "铁": 0.5},
    "黄瓜": {"蛋白质": 0.7, "脂肪": 0.1, "碳水化合物": 3.6, "膳食纤维": 0.5, "维生素C": 3.2, "钙": 14, "铁": 0.3},
    "菠菜": {"蛋白质": 2.9, "脂肪": 0.4, "碳水化合物": 3.6, "膳食纤维": 2.2, "维生素C": 28, "钙": 73, "铁": 2.7},
    
    # 水果类
    "苹果": {"蛋白质": 0.3, "脂肪": 0.2, "碳水化合物": 13.8, "膳食纤维": 2.1, "维生素C": 5, "钙": 6, "铁": 0.1},
    "香蕉": {"蛋白质": 1.1, "脂肪": 0.3, "碳水化合物": 22.8, "膳食纤维": 2.6, "维生素C": 8.7, "钙": 5, "铁": 0.3},
    
    # 豆制品类
    "豆腐": {"蛋白质": 8.1, "脂肪": 4.2, "碳水化合物": 1.9, "膳食纤维": 0.3, "钙": 138, "铁": 3.4, "镁": 32},
    
    # 蛋奶类
    "鸡蛋": {"蛋白质": 12.8, "脂肪": 9.7, "碳水化合物": 0.7, "胆固醇": 424, "维生素A": 198, "维生素D": 2.05},
    "牛奶": {"蛋白质": 3.3, "脂肪": 3.6, "碳水化合物": 4.9, "钙": 122, "维生素D": 1.2, "维生素B12": 0.44},
}

# 食物分类
FOOD_CATEGORIES = {
    "主食类": ["米饭", "面条", "馒头", "面包", "燕麦", "玉米"],
    "肉类": ["猪肉", "牛肉", "羊肉", "鸡肉", "鸭肉", "鱼肉"],
    "蔬菜类": ["西红柿", "黄瓜", "白菜", "菠菜", "胡萝卜", "土豆", "茄子"],
    "水果类": ["苹果", "香蕉", "橙子", "葡萄", "西瓜", "草莓", "蓝莓"],
    "豆制品类": ["豆腐", "豆浆", "豆腐干", "腐竹"],
    "蛋奶类": ["鸡蛋", "牛奶", "酸奶", "奶酪"],
    "零食类": ["薯片", "巧克力", "冰淇淋", "蛋糕", "曲奇"],
    "饮料类": ["可乐", "牛奶", "橙汁", "咖啡"],
    "快餐类": ["汉堡", "披萨", "炸鸡", "薯条"],
    "中餐常见菜": ["宫保鸡丁", "鱼香肉丝", "麻婆豆腐", "回锅肉", "糖醋里脊", "红烧肉"],
}

def get_food_calories(food_name):
    """
    根据食物名称获取热量信息
    
    参数:
        food_name (str): 食物名称
        
    返回:
        dict: 包含热量和描述的字典
    """
    # 检查是否在基础食物列表中
    for key in FOOD_CALORIES:
        if key in food_name:
            calories = FOOD_CALORIES[key]
            
            # 查找营养素信息
            nutrients = NUTRIENTS.get(key, {})
            
            result = {
                "热量": calories,
                "描述": f"{food_name}平均每100克含有{calories}千卡热量"
            }
            
            # 如果有营养素信息，添加到结果中
            if nutrients:
                result["营养素"] = nutrients
                
                # 添加营养评估
                protein = nutrients.get("蛋白质", 0)
                fat = nutrients.get("脂肪", 0)
                carbs = nutrients.get("碳水化合物", 0)
                
                result["营养评估"] = f"蛋白质: {protein}克, 脂肪: {fat}克, 碳水化合物: {carbs}克"
            
            return result
    
    # 检查是否在复杂食物列表中
    for key in COMPLEX_FOODS:
        if key in food_name:
            food_info = COMPLEX_FOODS[key].copy()
            
            # 增加营养评估
            if "营养素" in food_info:
                nutrients = food_info["营养素"]
                protein = nutrients.get("蛋白质", 0)
                fat = nutrients.get("脂肪", 0)
                carbs = nutrients.get("碳水化合物", 0)
                
                food_info["营养评估"] = f"蛋白质: {protein}克, 脂肪: {fat}克, 碳水化合物: {carbs}克"
            
            return food_info
    
    # 未找到精确匹配，尝试找相似食物
    similar_foods = get_similar_foods(food_name, threshold=0.7)
    if similar_foods:
        best_match = similar_foods[0]
        return {
            "热量": FOOD_CALORIES.get(best_match) if best_match in FOOD_CALORIES else COMPLEX_FOODS.get(best_match, {}).get("热量"),
            "描述": f"未找到精确匹配，但发现相似食物 '{best_match}'，参考每100克含有{FOOD_CALORIES.get(best_match) if best_match in FOOD_CALORIES else COMPLEX_FOODS.get(best_match, {}).get('热量')}千卡热量",
            "建议": "以上为参考值，实际热量可能因烹饪方式和配料不同而有所差异"
        }
    
    # 未找到匹配
    return {
        "热量": None,
        "描述": f"未能找到{food_name}的精确热量信息，建议参考类似食物或查询专业营养数据库",
        "建议": "可以尝试搜索更常见的食物名称，或者咨询营养专业人士"
    }

def get_similar_foods(food_name, threshold=0.7):
    """
    查找名称相似的食物
    
    参数:
        food_name (str): 食物名称
        threshold (float): 相似度阈值，0-1之间，越大要求越严格
        
    返回:
        list: 相似食物列表
    """
    if not food_name:
        return None
        
    all_foods = list(FOOD_CALORIES.keys()) + list(COMPLEX_FOODS.keys())
    similar_foods = []
    
    # 使用difflib进行模糊匹配
    matches = difflib.get_close_matches(food_name, all_foods, n=5, cutoff=threshold)
    if matches:
        similar_foods.extend(matches)
    
    # 关键字匹配
    for key in all_foods:
        if food_name in key or key in food_name:
            if key not in similar_foods:
                similar_foods.append(key)
    
    # 使用正则表达式匹配部分关键字
    pattern = re.compile(r'|'.join([re.escape(char) for char in food_name]))
    for key in all_foods:
        if pattern.search(key) and key not in similar_foods:
            similar_foods.append(key)
    
    return similar_foods[:10] if similar_foods else None

def get_foods_by_category(category):
    """
    根据分类获取食物列表
    
    参数:
        category (str): 食物分类
        
    返回:
        list: 该分类下的食物列表
    """
    if category in FOOD_CATEGORIES:
        return FOOD_CATEGORIES[category]
    
    # 尝试模糊匹配分类名
    for key in FOOD_CATEGORIES:
        if category in key or key in category:
            return FOOD_CATEGORIES[key]
    
    return None

def calculate_meal_calories(foods):
    """
    计算一餐饭的总热量
    
    参数:
        foods (list): 食物列表，每项为字典，包含名称和重量(克)
        例如: [{"名称": "米饭", "重量": 200}, {"名称": "红烧肉", "重量": 100}]
        
    返回:
        dict: 包含总热量和各食物热量明细
    """
    total_calories = 0
    details = []
    
    for food in foods:
        name = food.get("名称", "")
        weight = food.get("重量", 100)  # 默认100克
        
        # 获取食物热量
        food_info = get_food_calories(name)
        calories_per_100g = food_info.get("热量")
        
        if calories_per_100g:
            # 计算该食物的热量
            calories = calories_per_100g * weight / 100
            total_calories += calories
            
            details.append({
                "名称": name,
                "重量(克)": weight,
                "热量(千卡)": round(calories, 1),
                "每100克热量(千卡)": calories_per_100g
            })
        else:
            details.append({
                "名称": name,
                "重量(克)": weight,
                "热量(千卡)": "未知",
                "每100克热量(千卡)": "未知"
            })
    
    return {
        "总热量(千卡)": round(total_calories, 1),
        "详细信息": details,
        "建议摄入热量": "成年人每日建议摄入热量为：男性2000-2500千卡，女性1800-2200千卡，具体因年龄、活动量等而异"
    }

def get_low_calorie_alternatives(food_name):
    """
    获取低热量替代食物
    
    参数:
        food_name (str): 食物名称
        
    返回:
        list: 低热量替代食物列表
    """
    food_info = get_food_calories(food_name)
    calories = food_info.get("热量")
    
    if not calories:
        return ["未找到该食物的热量信息，无法提供替代建议"]
    
    # 查找相同类别的食物
    category = None
    for cat, foods in FOOD_CATEGORIES.items():
        if any(f in food_name for f in foods):
            category = cat
            break
    
    if not category:
        return ["未找到该食物的分类信息，无法提供特定类别的替代建议"]
    
    # 在同类别中查找低热量替代品
    alternatives = []
    for food in FOOD_CATEGORIES.get(category, []):
        if food in FOOD_CALORIES and FOOD_CALORIES[food] < calories * 0.7:  # 热量低于原食物的70%
            alternatives.append({
                "名称": food,
                "热量": FOOD_CALORIES[food],
                "减少热量": calories - FOOD_CALORIES[food]
            })
    
    # 按热量从低到高排序
    alternatives.sort(key=lambda x: x["热量"])
    
    return alternatives[:5] if alternatives else ["在同类别中未找到更低热量的替代食物"] 