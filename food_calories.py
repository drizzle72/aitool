"""
食物热量数据库模块

提供常见食物的热量信息和查询功能
"""

# 热量信息以每100克食物的千卡为单位
FOOD_CALORIES = {
    # 主食类
    "米饭": 116,
    "面条": 107,
    "馒头": 223,
    "面包": 265,
    "燕麦": 389,
    "玉米": 112,
    
    # 肉类
    "猪肉": 395,
    "牛肉": 106,
    "羊肉": 203,
    "鸡肉": 167,
    "鸭肉": 240,
    "鱼肉": 100,
    
    # 蔬菜类
    "西红柿": 15,
    "黄瓜": 16,
    "白菜": 12,
    "菠菜": 23,
    "胡萝卜": 36,
    "土豆": 81,
    "茄子": 24,
    
    # 水果类
    "苹果": 52,
    "香蕉": 93,
    "橙子": 47,
    "葡萄": 43,
    "西瓜": 32,
    "草莓": 32,
    "蓝莓": 57,
    
    # 零食类
    "薯片": 536,
    "巧克力": 546,
    "冰淇淋": 207,
    "蛋糕": 349,
    "曲奇": 480,
    
    # 饮料类
    "可乐": 42,
    "牛奶": 66,
    "橙汁": 47,
    "咖啡": 2,
    
    # 快餐类
    "汉堡": 295,
    "披萨": 267,
    "炸鸡": 337,
    "薯条": 312,
    
    # 中餐常见菜
    "宫保鸡丁": 151,
    "鱼香肉丝": 135,
    "麻婆豆腐": 107,
    "回锅肉": 231,
    "糖醋里脊": 187,
    "红烧肉": 325,
}

# 更复杂的菜品和组合食物
COMPLEX_FOODS = {
    "牛肉汉堡": {"热量": 354, "描述": "一份标准牛肉汉堡约150克，含有354千卡"},
    "意大利面": {"热量": 158, "描述": "一份意大利面约200克，含有158千卡/100克"},
    "披萨": {"热量": 267, "描述": "一片中号披萨约100克，含有267千卡"},
    "沙拉": {"热量": 152, "描述": "一份蔬菜沙拉配沙拉酱约200克，含有152千卡"},
    "炒饭": {"热量": 186, "描述": "一份炒饭约250克，含有186千卡/100克"},
    "煎饼果子": {"热量": 248, "描述": "一份约150克，含有248千卡/100克"},
    "火锅": {"热量": 230, "描述": "热量因具体食材而异，平均约230千卡/100克"},
}

def get_food_calories(food_name):
    """
    根据食物名称获取热量信息
    
    参数:
        food_name (str): 食物名称
        
    返回:
        dict: 包含热量和描述的字典
    """
    # 检查是否在基础食物列表中
    for key in FOOD_CALORIES:
        if key in food_name:
            calories = FOOD_CALORIES[key]
            return {
                "热量": calories,
                "描述": f"{food_name}平均每100克含有{calories}千卡热量"
            }
    
    # 检查是否在复杂食物列表中
    for key in COMPLEX_FOODS:
        if key in food_name:
            return COMPLEX_FOODS[key]
    
    # 未找到匹配
    return {
        "热量": None,
        "描述": f"未能找到{food_name}的精确热量信息，建议参考类似食物或查询专业营养数据库"
    }

def get_similar_foods(food_name, threshold=2):
    """
    查找名称相似的食物
    
    参数:
        food_name (str): 食物名称
        threshold (int): 相似度阈值
        
    返回:
        list: 相似食物列表
    """
    similar_foods = []
    
    # 简单的字符匹配
    for key in list(FOOD_CALORIES.keys()) + list(COMPLEX_FOODS.keys()):
        if food_name in key or key in food_name:
            similar_foods.append(key)
    
    return similar_foods if similar_foods else None 